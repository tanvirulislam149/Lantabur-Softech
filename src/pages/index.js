import Head from 'next/head'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import axios from 'axios'
import { useEffect, useState } from 'react'

const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  const [lang, setLang] = useState([]);
  const [selectedLang, setSelectedLang] = useState();
  const [text, setText] = useState("");
  const [audio, setAudio] = useState("");
  const [loading, setLoading] = useState(false);

  const config = {
    headers: {
      'X-RapidAPI-Key': process.env.NEXT_PUBLIC_X_REPIDAPI_KEY,
      'X-RapidAPI-Host': process.env.NEXT_PUBLIC_X_REPIDAPI_HOST
    }
  };

  useEffect(() => {
    axios.get('https://text-to-speech27.p.rapidapi.com/speech/lang', config)
      .then((res) => {
        let array = [];
        Object.entries(res.data).map(entry => {
          let key = entry[0];
          let value = entry[1];
          const data = { langKey: key, langName: value };
          array.push(data);
        })
        setLang(array);
      })
      .catch((err) => {
        console.log(err);
      })
  }, [])

  const handleSubmit = () => {
    setLoading(true);
    if (text.length !== 0) {
      fetch(`https://text-to-speech27.p.rapidapi.com/speech?text=${text}&lang=${selectedLang ? selectedLang : "en-us"}`, {
        method: 'GET',
        headers: {
          'X-RapidAPI-Key': process.env.NEXT_PUBLIC_X_REPIDAPI_KEY,
          'X-RapidAPI-Host': process.env.NEXT_PUBLIC_X_REPIDAPI_HOST,
        },
      })
        .then(res => res.blob())
        .then(blob => {
          const audioUrl = URL.createObjectURL(blob);
          setAudio(audioUrl);
          setLoading(false);
        })
    } else {
      console.log("none");
    }
  }

  return (
    <>
      <Head>
        <title>Text-to-speech</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div>
          <h1 className={styles.title}>Text-to-speech</h1>
          <div className={styles.inputCont}>
            <label htmlFor="text">Input text: </label> <br />
            <textarea className={styles.inputField} value={text} onChange={(e) => setText(e.target.value)} name="text" id="" cols="90" rows="7"></textarea> <br />
            <label htmlFor="text">Language: </label> <br />
            <select className={styles.language} value={selectedLang} onChange={(e) => setSelectedLang(e.target.value)} name="cars" id="cars">
              <option value="">Select Language</option>
              {
                lang.map(l => <option key={l.langKey} value={l.langKey}>{l.langKey}: {l.langName}</option>)
              }
            </select>
            <button className={styles.button} onClick={() => handleSubmit()}>Submit</button>
            {loading ? <div className={styles.lds_ring}><div></div><div></div><div></div><div></div></div> : ""}
          </div>
          <audio className={styles.audio} src={audio} controls></audio>
        </div>
      </main>
    </>
  )
}
